plugins {
//	java
	id "java"
//	id "jvm-test-suite"		// Below is deprecated Gradle features
	id("org.springframework.boot") version "2.7.14"
	id("io.spring.dependency-management") version "1.0.15.RELEASE"
}

group = "com.polarbookshop"
version = "0.0.1-SNAPSHOT"

java {
	sourceCompatibility = JavaVersion.VERSION_17
}

ext {
	set('springCloudVersion', "2021.0.3")
	set('testcontainersVersion', "1.17.3")
}

repositories {
	mavenCentral()
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

dependencies {
	implementation("org.springframework.boot:spring-boot-starter-web")
    implementation 'org.jetbrains:annotations:24.0.1'
	implementation 'org.testng:testng:7.1.0'
	implementation('org.springframework.boot:spring-boot-starter-test:3.1.2')
	implementation 'org.springframework.boot:spring-boot-starter-validation'	// for @Test
	testImplementation 'org.springframework.boot:spring-boot-starter-webflux'	// deprecated Gradle features - for @SpringBootTest
//	testImplementation("org.junit.jupiter:junit-jupiter:5.9.2")		// above is deprecated Gradle features
//	testRuntimeOnly("org.junit.platform:junit-platform-launcher")	// above is deprecated Gradle features

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.springframework.retry:spring-retry'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	runtimeOnly 'org.postgresql:postgresql'

	testImplementation 'org.testcontainers:postgresql'

	implementation 'org.flywaydb:flyway-core'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
	}
}

// tasks.withType<Test> {
tasks.named('test') {
		useJUnitPlatform()
}

bootRun {
	systemProperty 'spring.profiles.active', 'testdata'
}

bootBuildImage {
	imageName = "${project.name}"
	environment = ["BP_JVM_VERSION" : "17.*"]
//	host = "tcp://Fabrice-Ubuntu:2375"
//	tlsVerify = true
//	certPath = "/home/fabrice/.docker"
////	bindHostToBuilder = true
	docker {
		publishRegistry {
			username = project.findProperty("registryUsername")
			password = project.findProperty("registryToken")
			url = project.findProperty("registryUrl")
		}
	}
}
